import gui
$include "guih.icn"

class Boomtown : Dialog(menuFile, menuPlayers, menuBar, menu_separator_1, menuFileExit, menuFileNew, menuFileSave, menuPlayersLeave, menuPlayersNew, menuTurn, textListPlayer, textListTown, menuTurnNext, menuBusiness, menuProspecting, menuMine, menu_separator_2, menu_separator_3, menuProspectingClaim, menuBusinessClose, text_menu_item_hardRock, menuBusinessHigherEmp, menuBusinessLayoffEmp, text_menu_item_placer, menuBusinessSellInterest, menuBusinessStart, text_button_1, menu_separator_4, menu_separator_5, menuProspectingAssay, menuMineClose, menuMineHigherCrew, menuMineLayoffCrew, menuMineSellInterest, menuMineStart, mapDisplay, hbar, vbar, b, 
testButton)

	#Town information
	method makeTownReport()
		local report
		report := []
		put(report, town.name)
		put(report, "Population: " || town.population())
		
		put(report, "Mines: ")
		every mine := !mines do {
			put(report, "   " || mine.mineName || "(" || mine.mineType || ")")
			every o := !mine.ownership.owners do put(report, "    - " || o.owner || "(" || o.shares || "%)")
		}
		return report
	end
	
	method updateTownInfo()
		local report
		report := makeTownReport()
		textListTown.set_contents(report)
	end
	
	#player information
	method makePlayerReport(player)
		local report
		report := []
		put(report, player.name)
		put(report, "$ " || player.cash)
		return report
	end
		
	method updatePlayerInfo()  
		local report
		report := makePlayerReport(players[turn])
		textListPlayer.set_contents(report)
	end
	
	#GUI methods
   method component_setup()
      self.setup()
   end

   method end_dialog()
   end

   method init_dialog()
   end

   method on_exit(ev)
		exit()
   end

   method on_new_game(ev)
   end

   method on_save_game(ev)
   end
 
   method on_leave_town(ev)
		players[turn].leaveGame := round
		put(finalScores, players[turn])
		delete(players, turn)
		if *players > 0 then {
			updateTownInfo()
			on_menuTurnNext()
		}
		else {
			#give final game report
			exit()
		}
   end

   method on_new_player(ev)
		NewPlayerDialog().show_modal()
		updateTownInfo()
   end

   method on_menuTurnNext(ev)
		turn +:= 1
		if turn > *players then {
			turn := 1
			round +:= 1
		}
		updatePlayerInfo()
   end

   method on_menuProspectingClaim(ev)
		local tile
		if players[turn].cash >= 5 then {
			tile := getTile(current[1], current[2])
			if tile.owner == "GLO" then {
				players[turn].cash -:= 5
				tile.owner := players[turn].name
			}
		}
		updatePlayerInfo()
   end

   method on_menuBusinessClose(ev)
   end

   method on_menuBusinessHigherEmp(ev)
   end

   method on_menuBusinessLayoffEmp(ev)
   end

   method on_menuBusinessSellInterest(ev)
   end

   method on_menuBusinessStart(ev)
   end

   method on_menuProspectingAssay(ev)
		local tile
		tile := DisplayTile()
		tile.show_modal()
   end

   method on_menuMineClose(ev)
   end

   method on_menuMineHigherCrew(ev)
   end

   method on_menuMineLayoffCrew(ev)
   end

   method on_menuMineSellInterest(ev)
   end

   method on_menuMineStart(ev)
		local mineDialog
		mineDialog := createMineDialog()
		mineDialog.show_modal()
		updateTownInfo()
   end
	
	method mapPos(ev)
		mapX := hbar.get_value() 
		mapY := vbar.get_value()
		mapDisplay.canvasPos(mapX, mapY)
		#self.display()
	end
	
   method setup()
      self.set_attribs("size=1200,600")		
      menuBar := MenuBar()
      menuBar.set_pos("0", "0")
      menuFile := Menu()
      menuFile.set_label("File")
      menuFileNew := TextMenuItem()
      menuFileNew.set_label("New Game")
      menuFileNew.connect(self, "on_new_game", ACTION_EVENT)
      menuFile.add(menuFileNew)
      menuFileSave := TextMenuItem()
      menuFileSave.set_label("Save Game")
      menuFileSave.connect(self, "on_save_game", ACTION_EVENT)
      menuFile.add(menuFileSave)
      menu_separator_1 := MenuSeparator()
      menu_separator_1.set_is_shaded()
      menuFile.add(menu_separator_1)
      menuFileExit := TextMenuItem()
      menuFileExit.set_label("Exit")
      menuFileExit.connect(self, "on_exit", ACTION_EVENT)
      menuFile.add(menuFileExit)
      menuBar.add(menuFile)
      menuPlayers := Menu()
      menuPlayers.set_label("Players")
      menuPlayersNew := TextMenuItem()
      menuPlayersNew.set_label("New Player")
      menuPlayersNew.connect(self, "on_new_player", ACTION_EVENT)
      menuPlayers.add(menuPlayersNew)
      menuPlayersLeave := TextMenuItem()
      menuPlayersLeave.set_label("Leave Town")
      menuPlayersLeave.connect(self, "on_leave_town", ACTION_EVENT)
      menuPlayers.add(menuPlayersLeave)
      menuBar.add(menuPlayers)
      menuProspecting := Menu()
      menuProspecting.set_label("Prospecting")
      menuProspectingAssay := TextMenuItem()
      menuProspectingAssay.set_label("Assay")
      menuProspectingAssay.connect(self, "on_menuProspectingAssay", ACTION_EVENT)
      menuProspecting.add(menuProspectingAssay)
      menuProspectingClaim := TextMenuItem()
      menuProspectingClaim.set_label("Claim")
      menuProspectingClaim.connect(self, "on_menuProspectingClaim", ACTION_EVENT)
      menuProspecting.add(menuProspectingClaim)
      menuMine := Menu()
      menuMine.set_label("Mine")
      menuMineStart := TextMenuItem()
      menuMineStart.set_label("Start")
      menuMineStart.connect(self, "on_menuMineStart", ACTION_EVENT)
      menuMine.add(menuMineStart)
      menuMineSellInterest := TextMenuItem()
      menuMineSellInterest.set_label("Sell Interest")
      menuMineSellInterest.connect(self, "on_menuMineSellInterest", ACTION_EVENT)
      menuMine.add(menuMineSellInterest)
      menu_separator_4 := MenuSeparator()
      menu_separator_4.set_is_shaded()
      menuMine.add(menu_separator_4)
      menuMineHigherCrew := TextMenuItem()
      menuMineHigherCrew.set_label("Higher Crew")
      menuMineHigherCrew.connect(self, "on_menuMineHigherCrew", ACTION_EVENT)
      menuMine.add(menuMineHigherCrew)
      menuMineLayoffCrew := TextMenuItem()
      menuMineLayoffCrew.set_label("Layoff Crew")
      menuMineLayoffCrew.connect(self, "on_menuMineLayoffCrew", ACTION_EVENT)
      menuMine.add(menuMineLayoffCrew)
      menu_separator_5 := MenuSeparator()
      menu_separator_5.set_is_shaded()
      menuMine.add(menu_separator_5)
      menuMineClose := TextMenuItem()
      menuMineClose.set_label("Close")
      menuMineClose.connect(self, "on_menuMineClose", ACTION_EVENT)
      menuMine.add(menuMineClose)
      menuProspecting.add(menuMine)
      menuBar.add(menuProspecting)
      menuBusiness := Menu()
      menuBusiness.set_label("Businesses")
      menuBusinessStart := TextMenuItem()
      menuBusinessStart.set_label("Start")
      menuBusinessStart.connect(self, "on_menuBusinessStart", ACTION_EVENT)
      menuBusiness.add(menuBusinessStart)
      menuBusinessSellInterest := TextMenuItem()
      menuBusinessSellInterest.set_label("Sell Interest")
      menuBusinessSellInterest.connect(self, "on_menuBusinessSellInterest", ACTION_EVENT)
      menuBusiness.add(menuBusinessSellInterest)
      menu_separator_2 := MenuSeparator()
      menu_separator_2.set_is_shaded()
      menuBusiness.add(menu_separator_2)
      menuBusinessHigherEmp := TextMenuItem()
      menuBusinessHigherEmp.set_label("Higher Employees")
      menuBusinessHigherEmp.connect(self, "on_menuBusinessHigherEmp", ACTION_EVENT)
      menuBusiness.add(menuBusinessHigherEmp)
      menuBusinessLayoffEmp := TextMenuItem()
      menuBusinessLayoffEmp.set_label("Layoff Employees")
      menuBusinessLayoffEmp.connect(self, "on_menuBusinessLayoffEmp", ACTION_EVENT)
      menuBusiness.add(menuBusinessLayoffEmp)
      menu_separator_3 := MenuSeparator()
      menu_separator_3.set_is_shaded()
      menuBusiness.add(menu_separator_3)
      menuBusinessClose := TextMenuItem()
      menuBusinessClose.set_label("Close Business")
      menuBusinessClose.connect(self, "on_menuBusinessClose", ACTION_EVENT)
      menuBusiness.add(menuBusinessClose)
      menuBar.add(menuBusiness)
      menuTurn := Menu()
      menuTurn.set_label("Turns")
      menuTurnNext := TextMenuItem()
      menuTurnNext.set_label("Next ->")
      menuTurnNext.connect(self, "on_menuTurnNext", ACTION_EVENT)
      menuTurn.add(menuTurnNext)
      menuBar.add(menuTurn)
      self.add(menuBar)
		
      textListPlayer := TextList()
      textListPlayer.set_pos("850", "310")
      textListPlayer.set_size("350", "290")
      textListPlayer.set_draw_border()
      textListPlayer.set_contents([""])
      self.add(textListPlayer)
      textListTown := TextList()
      textListTown.set_pos("850", "25")
      textListTown.set_size("350", "285")
      textListTown.set_draw_border()
      textListTown.set_contents([""])
      self.add(textListTown)
		
		vbar := ScrollBar()
		vbar.set_pos("830", "25")
		vbar.set_size(20, 580)
		vbar.set_range(0, scale * MAPSIZE / 2 + scale - 550)
		vbar.set_value(0)
		vbar.set_increment_size(1)
		vbar.connect(self, "mapPos", MOUSE_DRAG_EVENT)
		self.add(vbar)
		
		hbar := ScrollBar()
		hbar.set_pos("0", "580")
		hbar.set_size(830, 20)
		hbar.set_range(0, scale * MAPSIZE + scale - 810)
		hbar.set_value(0)
		hbar.set_increment_size(1)
		hbar.set_is_horizontal()
		hbar.connect(self, "mapPos", MOUSE_DRAG_EVENT)
		self.add(hbar)
		
		mapDisplay := Canvas("size=830,580", "pos=0,30")
		mapDisplay.set_align("l", "t")
		self.add(mapDisplay)
   end

initially
   self.Dialog.initially()
end

global 
	town,
	areaMap,
	panelMap,
	players,
	finalScores,
	round,
	turn,
	mines,
	current,
	scale,
	MAPSIZE,
	TREEMAX,
	imageNumber,
	overlayNumber,
	xShift,
	yShift,
	maxX, 
	maxY,
	#sprites
	baseTile,
	selectedSprite,
	groundSprite,
	groundMineSprite,
	riverSpriteN,
	riverSpriteE,
	riverSpriteS,
	riverSpriteW,
	riverSpriteNE,
	riverSpriteNS,
	riverSpriteNW,
	riverSpriteES,
	riverSpriteEW,
	riverSpriteSW,
	riverSpriteNES,
	riverSpriteNEW,
	riverSpriteNSW,
	riverSpriteESW,
	riverSpriteNESW,
	treesSprite1,
	treesSprite2,
	treesSprite3
	
procedure initialze()
	MAPSIZE := 22
	TREEMAX := 40
	imageNumber := create("image_" || seq())
	overlayNumber := create("overlay_" || seq())
	scale := 64
	round := 1
	turn := 0
	areaMap := []
	current := [1, 1]
	town := Town()
	players := []
	finalScores := []
	mines := []
	xShift := yShift := 0
	initializeMapSprites()
end

procedure setMapExtents()
	maxX := scale * MAPSIZE
	maxY := scale * MAPSIZE / 2
	
end

procedure main()	
   local 
		welcome,
		disp,
		canvas
		
	#welcome := Welcome()
	#welcome.show_modal()

	initialze()
	makeMap()
	
   disp := Boomtown()
   disp.show_modal()
	
	
end

